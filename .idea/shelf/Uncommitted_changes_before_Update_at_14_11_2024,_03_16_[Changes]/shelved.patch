Index: flake.nix
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    description = \"Nix Config\";\n\n    inputs = {\n        # Nixpkgs\n        nixpkgs.url = \"github:nixos/nixpkgs/nixos-24.05\";\n        # You can access packages and modules from different nixpkgs revs\n        # at the same time. Here's an working example:\n        nixpkgs-unstable.url = \"github:nixos/nixpkgs/nixos-unstable\";\n        # Also see the 'unstable-packages' overlay at 'overlays/default.nix'.\n\n        catppuccin.url = \"github:catppuccin/nix\";\n\n        # Home manager\n        home-manager.url = \"github:nix-community/home-manager/release-24.05\";\n        home-manager.inputs.nixpkgs.follows = \"nixpkgs\";\n\n        # rust-overlay.url = \"github:oxalica/rust-overlay\";\n    };\n\n    outputs = inputs@{\n        self,\n        nixpkgs,\n        nixpkgs-unstable,\n        catppuccin,\n        home-manager,\n        # rust-overlay,\n        ...\n    }: let\n        inherit (self) outputs;\n        # Supported systems for your flake packages, shell, etc.\n        systems = [\n            \"x86_64-linux\"\n        ];\n        # This is a function that generates an attribute by calling a function you\n        # pass to it, with each system as an argument\n        forAllSystems = nixpkgs.lib.genAttrs systems;\n\n        system = \"x86_64-linux\";\n    in with inputs; {\n        # Your custom packages\n        # Accessible through 'nix build', 'nix shell', etc\n        packages = forAllSystems (system: import ./pkgs nixpkgs.legacyPackages.${system});\n        # Formatter for your nix files, available through 'nix fmt'\n        # Other options beside 'alejandra' include 'nixpkgs-fmt'\n        formatter = forAllSystems (system: nixpkgs.legacyPackages.${system}.alejandra);\n\n        # Your custom packages and modifications, exported as overlays\n        overlays = import ./overlays {inherit inputs;};\n        \n        # Reusable nixos modules you might want to export\n        # These are usually stuff you would upstream into nixpkgs\n        nixosModules = import ./modules/nixos;\n        # Reusable home-manager modules you might want to export\n        # These are usually stuff you would upstream into home-manager\n        homeManagerModules = import ./modules/home-manager;\n\n        # NixOS configuration entrypoint\n        # Available through 'nixos-rebuild --flake .#your-hostname'\n        nixosConfigurations = {\n            pc = nixpkgs.lib.nixosSystem {\n                # pkgs = import nixpkgs { inherit system; };\n                specialArgs = {\n                    inherit inputs outputs system;\n                    pkgs-unstable = import nixpkgs-unstable {\n                            inherit system;\n                            config.allowUnfree = true;\n                    };\n                    hardware-config = \"pc\";\n                    use-cuda = true;\n                };\n                modules = [\n                    # > Our main nixos configuration file <\n                    catppuccin.nixosModules.catppuccin\n                    ./nixos/configuration.nix\n                ];\n            };\n            laptop = nixpkgs.lib.nixosSystem {\n                # pkgs = import nixpkgs { inherit system; };\n                specialArgs = {\n                    inherit inputs outputs system;\n                    pkgs-unstable = import nixpkgs-unstable {\n                            inherit system;\n                            config.allowUnfree = true;\n                    };\n                    hardware-config = \"laptop\";\n                    use-cuda = false;\n                };\n                modules = [\n                    # > Our main nixos configuration file <\n                    catppuccin.nixosModules.catppuccin\n                    ./nixos/configuration.nix\n                ];\n            };\n            fastop = nixpkgs.lib.nixosSystem {\n                # pkgs = import nixpkgs { inherit system; };\n                specialArgs = {\n                    inherit inputs outputs system;\n                    pkgs-unstable = import nixpkgs-unstable {\n                            inherit system;\n                            config.allowUnfree = true;\n                    };\n                    hardware-config = \"fastop\";\n                    use-cuda = false;\n                };\n                modules = [\n                    # > Our main nixos configuration file <\n                    catppuccin.nixosModules.catppuccin\n                    ./nixos/configuration.nix\n                ];\n            };\n        };\n\n        # Standalone home-manager configuration entrypoint\n        # Available through 'home-manager --flake .#your-username@your-hostname'\n        # homeConfigurations = {\n        #     \"robert@default\" = home-manager.lib.homeManagerConfiguration {\n        #         pkgs = nixpkgs.legacyPackages.x86_64-linux; # Home-manager requires 'pkgs' instance\n        #         extraSpecialArgs = {inherit inputs outputs;};\n        #         modules = [\n        #             # > Our main home-manager configuration file <\n        #             ./home-manager/home.nix\n        #         ];\n        #     };\n        # };\n    };\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/flake.nix b/flake.nix
--- a/flake.nix	(revision 65f837ad962512f3f3b2a33c9be324f950f6a397)
+++ b/flake.nix	(date 1731554150442)
@@ -63,11 +63,12 @@
                 specialArgs = {
                     inherit inputs outputs system;
                     pkgs-unstable = import nixpkgs-unstable {
-                            inherit system;
-                            config.allowUnfree = true;
+                        inherit system;
+                        config.allowUnfree = true;
                     };
                     hardware-config = "pc";
                     use-cuda = true;
+                    lite = true;
                 };
                 modules = [
                     # > Our main nixos configuration file <
@@ -85,6 +86,7 @@
                     };
                     hardware-config = "laptop";
                     use-cuda = false;
+                    lite = false;
                 };
                 modules = [
                     # > Our main nixos configuration file <
@@ -102,6 +104,7 @@
                     };
                     hardware-config = "fastop";
                     use-cuda = false;
+                    lite = false;
                 };
                 modules = [
                     # > Our main nixos configuration file <
Index: home-manager/packages.nix
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n    inputs,\n    outputs,\n    lib,\n    config,\n    pkgs,\n    pkgs-unstable,\n    home,\n    ...\n}: \nlet\n    # Adding the local file to the Nix store\n    # wolframSH = builtins.fetchurl {\n    #     url = \"https://raw.githubusercontent.com/Robert-M-Lucas/nix-config/master/home-manager/assets/WolframEngine_13.3.0_LINUX.sh\";\n    #     sha256 = \"96106ac8ed6d0e221a68d846117615c14025320f927e5e0ed95b1965eda68e31\";\n    # };\n\n    # # Overriding the wolfram-engine package to include the file\n    # customWolframEngine = pkgs.wolfram-engine.overrideAttrs (oldAttrs: {\n    #     nativeBuildInputs = oldAttrs.nativeBuildInputs ++ [ wolframSH ];\n    # });\n    pythonEnv = pkgs.python3.withPackages (ps: with ps; [\n        # torchWithCuda\n        # Add your Python packages here\n        numpy\n        scikit-learn\n        jupyter\n        matplotlib\n        pooch\n        opencv4\n        ffmpeg-python\n        pygobject3\n        # torch-bin\n        # torchsde\n        # torchvision-bin\n        # torchaudio-bin\n        # einops\n        # transformers\n        # tokenizers\n        # sentencepiece\n        # safetensors\n        # aiohttp\n        # pyyaml\n        # pillow\n        # scipy\n        # tqdm\n        # psutil\n        # torchWithCuda\n\n        #non essential dependencies:\n        # kornia\n        # spandrel\n        # soundfile\n\n        # Include libstdc++ for your environment\n        # pkgs.libstdcxx5\n    ]);\nin {\n    home.packages = let \n        x = with pkgs; [\n    # ====== GUI Apps ======\n            libreoffice\n            calibre\n            obsidian\n            protonvpn-gui\n            pomodoro-gtk\n            wireshark\n            arduino-ide\n            krita\n            gimp\n            obs-studio\n            mediawriter\n            # qimgv # Consider removing\n            # libsForQt5.dolphin\n            darktable\n            # qbittorrent # Removed due to vulnerability atm\n            # meld\n            blender\n            qalculate-gtk\n            vesktop\n            steam\n            blender\n            rare\n            musescore\n            insomnia\n            alacarte\n            prismlauncher\n\n    # ====== CMD ======\n            platformio-core\n            sl\n            # oh-my-fish\n            # gh\n            rustup\n            cloc\n            neovim\n            # xclip\n            nodejs_22\n            # wolfram-engine\n            ffmpeg\n            # clang\n            # clang-tools\n            # libgcc\n            # gnumake\n            # cmake\n            # extra-cmake-modules\n            # stdenv.cc.cc.lib\n            pythonEnv\n            # zoxide\n            nasm\n            # blas\n            texlive.combined.scheme-full\n            # libsForQt5.qtstyleplugin-kvantum\n            # libsForQt5.qt5ct\n            google-cloud-sdk\n            fortune\n            zip\n            unzip\n            xclip\n            libqalculate\n\n            pkg-config \n            alsa-lib\n            libudev-zero\n\n            legendary-gl\n\n            dconf2nix\n\n            (writeShellScriptBin \"nix-config\" (builtins.readFile ./scripts/nix-config.sh))\n            (writeShellScriptBin \"nix-clean\" (builtins.readFile ./scripts/nix-clean.sh))\n            # (writeShellScriptBin \"shell\" (builtins.readFile ./scripts/shell.sh))\n            # (writeShellScriptBin \"shell-pure\" (builtins.readFile ./scripts/shell-pure.sh))\n            (writeShellScriptBin \"shell-config\" (builtins.readFile ./scripts/shell-config.sh))\n            (writeShellScriptBin \"neofetch\" (builtins.readFile ./scripts/unneofetch.sh))\n            \n            # (writeShellScriptBin \"cdd\" (builtins.readFile ./scripts/cdd.sh))\n            # (writeShellScriptBin \"cdu\" (builtins.readFile ./scripts/cdu.sh))\n\n    # ====== IDEs ======\n            jetbrains.pycharm-community\n\n    # ====== Extensions ======\n            gnomeExtensions.ddterm\n            gnomeExtensions.hide-top-bar\n            gnomeExtensions.caffeine\n            gnomeExtensions.vitals\n            gnomeExtensions.enhanced-osk\n            gnomeExtensions.blur-my-shell\n            gnomeExtensions.appindicator\n            gnomeExtensions.shutdowntimer\n            gnomeExtensions.color-picker\n            # gnomeExtensions.custom-accent-colors\n            \n            # graphite-gtk-theme\n            # gtk-engine-murrine\n            # gnome.gnome-themes-extra\n\n    # ====== Other ======\n            diff-so-fancy\n        ];\n\n        y = with pkgs-unstable; [\n            # ====== IDEs ======\n            jetbrains.rust-rover\n            jetbrains.webstorm\n            jetbrains.rider\n            jetbrains.pycharm-professional\n            jetbrains.jdk\n            jetbrains.idea-ultimate\n            jetbrains.goland\n            jetbrains.clion\n            android-studio\n            zed-editor\n\n            # gephi\n            discord\n            muse-sounds-manager\n            davinci-resolve\n        ];\n\n        z = [\n            # overlays.davinci-resolve\n        ];\n    in\n        x ++ y ++ z;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/home-manager/packages.nix b/home-manager/packages.nix
--- a/home-manager/packages.nix	(revision 65f837ad962512f3f3b2a33c9be324f950f6a397)
+++ b/home-manager/packages.nix	(date 1731554193073)
@@ -6,6 +6,7 @@
     pkgs,
     pkgs-unstable,
     home,
+    lite,
     ...
 }: 
 let
@@ -182,6 +183,10 @@
         z = [
             # overlays.davinci-resolve
         ];
+
+        non-lite = [
+            
+        ];
     in
-        x ++ y ++ z;
+        x ++ y ++ z ++ (if lite then [] else non-lite);
 }
Index: nixos/configuration.nix
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># This is your system's configuration file.\n# Use this to configure your system environment (it replaces /etc/nixos/configuration.nix)\n{\n    inputs,\n    outputs,\n    lib,\n    config,\n    pkgs,\n    pkgs-unstable,\n    system,\n    hardware-config,\n    use-cuda,\n    overlays,\n    ...\n}: {\n    # You can import other NixOS modules here\n    imports = [\n        inputs.home-manager.nixosModules.home-manager\n\n        # If you want to use modules your own flake exports (from modules/nixos):\n        # outputs.nixosModules.example\n\n        # Or modules from other flakes (such as nixos-hardware):\n        # inputs.hardware.nixosModules.common-cpu-amd\n        # inputs.hardware.nixosModules.common-ssd\n\n        # You can also split up your configuration and import pieces of it here:\n        # ./users.nix\n\n        # Import your generated (nixos-generate-config) hardware configuration\n        ./${hardware-config}/hardware-configuration.nix\n    ];\n\n    home-manager = {\n        extraSpecialArgs = { inherit inputs outputs system pkgs-unstable use-cuda overlays; };\n        users = {\n            # Import your home-manager configuration\n            robert = import ../home-manager/home.nix;\n        };\n        backupFileExtension = \"backup\";\n    };\n\n    # Bootloader.\n    # boot.loader.systemd-boot.enable = true;\n    boot.loader.efi.canTouchEfiVariables = true;\n    \n    boot.loader.grub = {\n        enable = true;\n        useOSProber = true;\n        devices = [ \"nodev\" ];\n        efiSupport = true;\n\n        extraEntries= ''\n        menuentry \"UEFI Settings\" {\n            fwsetup\n        }\n\n        menuentry \"Shutdown\" {\n            halt\n        }\n        '';\n\n        theme = pkgs.stdenv.mkDerivation {\n            pname = \"distro-grub-themes\";\n            version = \"3.1\";\n            src = pkgs.fetchFromGitHub {\n                owner = \"AdisonCavani\";\n                repo = \"distro-grub-themes\";\n                rev = \"v3.1\";\n                hash = \"sha256-ZcoGbbOMDDwjLhsvs77C7G7vINQnprdfI37a9ccrmPs=\";\n            };\n            installPhase = \"cp -r customize/nixos $out\";\n        };\n    };\n\n    \n\n\n    swapDevices = [ \n        { \n            device = \"/swapfile\";\n            size = 8 * 1024; # 16GB\n        }\n    ];\n\n    networking.firewall = {\n        enable = true;\n        allowedTCPPorts = [ 8081 ];\n        allowedUDPPorts = [ 8081 ];\n    };\n\n    nixpkgs = {\n        # You can add overlays here\n        overlays = [\n            # Add overlays your own flake exports (from overlays and pkgs dir):\n            outputs.overlays.additions\n            outputs.overlays.modifications\n            outputs.overlays.unstable-packages\n\n            # You can also add overlays exported from other flakes:\n            # neovim-nightly-overlay.overlays.default\n\n            # Or define it inline, for example:\n            # (final: prev: {\n            #     hi = final.hello.overrideAttrs (oldAttrs: {\n            #         patches = [ ./change-hello-to-hi.patch ];\n            #     });\n            # })\n        ];\n        # Configure your nixpkgs instance\n        config = {\n            # Disable if you don't want unfree packages\n            allowUnfree = true;\n        };\n    };\n\n    nix = let\n        flakeInputs = lib.filterAttrs (_: lib.isType \"flake\") inputs;\n    in {\n        settings = {\n            # Enable flakes and new 'nix' command\n            experimental-features = \"nix-command flakes\";\n            # Opinionated: disable global registry\n            flake-registry = \"\";\n            # Workaround for https://github.com/NixOS/nix/issues/9574\n            nix-path = config.nix.nixPath;\n        };\n        # Opinionated: disable channels\n        channel.enable = false;\n\n        # Opinionated: make flake registry and nix path match flake inputs\n        registry = lib.mapAttrs (_: flake: {inherit flake;}) flakeInputs;\n        nixPath = lib.mapAttrsToList (n: _: \"${n}=flake:${n}\") flakeInputs;\n    };\n\n    # Set your time zone.\n    time.timeZone = \"Europe/London\";\n\n    # Select internationalisation properties.\n    i18n.defaultLocale = \"en_GB.UTF-8\";\n\n    i18n.inputMethod.enabled = \"ibus\"; # Enables Super + . emoji picker\n\n    i18n.extraLocaleSettings = {\n        LC_ADDRESS = \"en_GB.UTF-8\";\n        LC_IDENTIFICATION = \"en_GB.UTF-8\";\n        LC_MEASUREMENT = \"en_GB.UTF-8\";\n        LC_MONETARY = \"en_GB.UTF-8\";\n        LC_NAME = \"en_GB.UTF-8\";\n        LC_NUMERIC = \"en_GB.UTF-8\";\n        LC_PAPER = \"en_GB.UTF-8\";\n        LC_TELEPHONE = \"en_GB.UTF-8\";\n        LC_TIME = \"en_GB.UTF-8\";\n    };\n\n    # Enable the X11 windowing system.\n    services.xserver.enable = true;\n\n    # Enable the GNOME Desktop Environment.\n    services.xserver.displayManager.gdm.enable = true;\n    services.xserver.desktopManager.gnome.enable = true;\n    services.xserver.excludePackages = [ pkgs.xterm ];\n\n    # Configure keymap in X11\n    services.xserver.xkb = {\n        layout = \"gb\";\n        variant = \"\";\n    };\n\n    # Configure console keymap\n    console.keyMap = \"uk\";\n\n    # Enable CUPS to print documents.\n    services.printing.enable = true;\n\n    # Enable sound with pipewire.\n    hardware.pulseaudio.enable = false;\n    security.rtkit.enable = true;\n    services.pipewire = {\n        enable = true;\n        alsa.enable = true;\n        alsa.support32Bit = true;\n        pulse.enable = true;\n        # If you want to use JACK applications, uncomment this\n        #jack.enable = true;\n\n        # use the example session manager (no others are packaged yet so this is enabled by default,\n        # no need to redefine it in your config for now)\n        #media-session.enable = true;\n    };\n\n    # Enable touchpad support (enabled default in most desktopManager).\n    # services.xserver.libinput.enable = true;\n\n    # List packages installed in system profile. To search, run:\n    # $ nix search wget\n    programs.git.enable = true;\n\n    # Move to home-manager if possible\n    # programs.steam.enable = true;\n\n    programs.nix-ld = {\n        enable = true;\n        libraries = with pkgs; [\n            stdenv.cc.cc.lib\n        ];\n    };\n\n    virtualisation.docker.enable = true;\n\n    environment.systemPackages = with pkgs; [\n        fprintd\n        fastfetch\n        nixVersions.latest\n        # python3\n        gcc\n        usbutils\n        # home-manager\n        (writeShellScriptBin \"nix-env\" (builtins.readFile ./nonixenv.sh))\n    ];\n\n    fonts.packages = with pkgs; [\n        (nerdfonts.override { fonts = [ \"FiraCode\" ]; })\n    ];\n\n    environment.gnome.excludePackages = (with pkgs; [\n        # for packages that are pkgs.*\n        gnome-tour\n        gnome-connections\n    ]) ++ (with pkgs.gnome; [\n        # for packages that are pkgs.gnome.*\n        epiphany # web browser\n        geary # email reader\n        yelp\n        seahorse\n        gnome-clocks\n        gnome-maps\n        gnome-weather\n        # evince # document viewer\n    ]);\n\n    services.fprintd.enable = true;\n    services.fprintd.tod.enable = true;\n    # services.fprintd.tod.driver = pkgs.libfprint-2-tod1-vfs0090;\n    services.fprintd.tod.driver = pkgs.libfprint-2-tod1-goodix;\n\n\n    # Some programs need SUID wrappers, can be configured further or are\n    # started in user sessions.\n    # programs.mtr.enable = true;\n    # programs.gnupg.agent = {\n    #     enable = true;\n    #     enableSSHSupport = true;\n    # };\n\n    # List services that you want to enable:\n\n    # Open ports in the firewall.\n    # networking.firewall.allowedTCPPorts = [ ... ];\n    # networking.firewall.allowedUDPPorts = [ ... ];\n    # Or disable the firewall altogether.\n    # networking.firewall.enable = false;\n\n    # networking.wireless.enable = true;    # Enables wireless support via wpa_supplicant.\n\n    # Configure network proxy if necessary\n    # networking.proxy.default = \"http://user:password@proxy:port/\";\n    # networking.proxy.noProxy = \"127.0.0.1,localhost,internal.domain\";\n\n    # Enable networking\n    networking.networkmanager.enable = true;\n    networking.hostName = \"nixos\";\n\n    # This setups a SSH server. Very important if you're setting up a headless system.\n    # Feel free to remove if you don't need it.\n    services.openssh = {\n        enable = false;\n        settings = {\n            # Opinionated: forbid root login through SSH.\n            PermitRootLogin = \"no\";\n            # Opinionated: use keys only.\n            # Remove if you want to SSH using passwords\n            PasswordAuthentication = false;\n        };\n    };\n\n    programs.bash = {\n        interactiveShellInit = ''\n            if [[ -x ${pkgs.fish}/bin/fish && $(${pkgs.procps}/bin/ps --no-header --pid=$PPID --format=comm) != \"fish\" && -z ''${BASH_EXECUTION_STRING} ]]\n            then\n                shopt -q login_shell && LOGIN_OPTION='--login' || LOGIN_OPTION=\"\"\n                exec ${pkgs.fish}/bin/fish $LOGIN_OPTION\n            fi\n        '';\n    };\n\n    programs.captive-browser.enable = true;\n    programs.captive-browser.interface = \"wlp2s0\";\n\n    # Configure your system-wide user settings (groups, etc), add more users as needed.\n    users.users = {\n        robert = {\n            # You can set an initial password for your user.\n            # If you do, you can skip setting a root password by passing '--no-root-passwd' to nixos-install.\n            # Be sure to change it (using passwd) after rebooting!\n            # initialPassword = \"correcthorsebatterystaple\";\n            description = \"Robert Lucas\";\n            isNormalUser = true;\n            openssh.authorizedKeys.keys = [\n                # Add your SSH public key(s) here, if you plan on using SSH to connect\n            ];\n            # Be sure to add any other groups you need (such as networkmanager, audio, docker, etc)\n            extraGroups = [\"wheel\" \"networkmanager\" \"docker\"];\n        };\n    };\n\n    # ? Last time running `nix-store --optimise` it only saved ~7GB for a very long execution time\n    # nix.settings.auto-optimise-store = true;\n\n    # https://nixos.wiki/wiki/FAQ/When_do_I_update_stateVersion\n    system.stateVersion = \"24.05\";\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nixos/configuration.nix b/nixos/configuration.nix
--- a/nixos/configuration.nix	(revision 65f837ad962512f3f3b2a33c9be324f950f6a397)
+++ b/nixos/configuration.nix	(date 1731296312682)
@@ -209,6 +209,7 @@
     virtualisation.docker.enable = true;
 
     environment.systemPackages = with pkgs; [
+	tmux
         fprintd
         fastfetch
         nixVersions.latest
